<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zhihao Chen</title>
    <link>/</link>
    <description>Recent content on Zhihao Chen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 12 Dec 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python presentation</title>
      <link>/blog/python-presentation/</link>
      <pubDate>Thu, 12 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/python-presentation/</guid>
      <description> # Find all 3-mers in these two sequences my_seq1 = &amp;quot;ATCATCATG&amp;quot; my_seq2 = &amp;quot;CAGCCCAATCAGGCTCTACTGCCACTAAACTTACGCAGGATATATTTACGCCGACGTACT&amp;quot; def count_3mers(string): theDic = {} length = len(string) - 2 for i in range(length): thestring = string[i:i+3] if not thestring in theDic: theDic[thestring] = 0 theDic[thestring] += 1 return theDic print(&amp;quot;All 3mers in the first sequence: &amp;quot;,count_3mers(my_seq1)) ## (&amp;#39;All 3mers in the first sequence: &amp;#39;, {&amp;#39;ATG&amp;#39;: 1, &amp;#39;CAT&amp;#39;: 2, &amp;#39;ATC&amp;#39;: 2, &amp;#39;TCA&amp;#39;: 2}) print(&amp;quot;All 3mers in the second sequence: &amp;quot;,count_3mers(my_seq2)) ## (&amp;#39;All 3mers in the second sequence: &amp;#39;, {&amp;#39;CTT&amp;#39;: 1, &amp;#39;AAA&amp;#39;: 1, &amp;#39;ATC&amp;#39;: 1, &amp;#39;AAC&amp;#39;: 1, &amp;#39;ATA&amp;#39;: 2, &amp;#39;AGG&amp;#39;: 2, &amp;#39;CTC&amp;#39;: 1, &amp;#39;AGC&amp;#39;: 1, &amp;#39;AAT&amp;#39;: 1, &amp;#39;ATT&amp;#39;: 1, &amp;#39;CTG&amp;#39;: 1, &amp;#39;CTA&amp;#39;: 2, &amp;#39;ACT&amp;#39;: 4, &amp;#39;CAC&amp;#39;: 1, &amp;#39;ACG&amp;#39;: 3, &amp;#39;CAA&amp;#39;: 1, &amp;#39;CCA&amp;#39;: 2, &amp;#39;CCG&amp;#39;: 1, &amp;#39;CCC&amp;#39;: 1, &amp;#39;TAT&amp;#39;: 2, &amp;#39;CGA&amp;#39;: 1, &amp;#39;CAG&amp;#39;: 3, &amp;#39;TCT&amp;#39;: 1, &amp;#39;GAT&amp;#39;: 1, &amp;#39;TTT&amp;#39;: 1, &amp;#39;TGC&amp;#39;: 1, &amp;#39;GGA&amp;#39;: 1, &amp;#39;TAA&amp;#39;: 1, &amp;#39;GGC&amp;#39;: 1, &amp;#39;TAC&amp;#39;: 4, &amp;#39;TTA&amp;#39;: 2, &amp;#39;GAC&amp;#39;: 1, &amp;#39;CGT&amp;#39;: 1, &amp;#39;TCA&amp;#39;: 1, &amp;#39;GCA&amp;#39;: 1, &amp;#39;GTA&amp;#39;: 1, &amp;#39;GCC&amp;#39;: 3, &amp;#39;GCT&amp;#39;: 1, &amp;#39;CGC&amp;#39;: 2}) </description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>/projects/</link>
      <pubDate>Sun, 02 Oct 2016 22:55:05 -0400</pubDate>
      
      <guid>/projects/</guid>
      <description>Projects Here are some R_projects I have been working on:   R_Project 1: Data Wrangling and Exploratory Analysis
  R_Project 2: Modeling, Inference, Prediction
  </description>
    </item>
    
    <item>
      <title>Project 1: Data Wrangling and Exploratory Analysis</title>
      <link>/project1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/project1/</guid>
      <description>0. Introduction The first data was called US voter turnout, which includes number of age-eligible voters versus total votes counted by state and year. The second data was called US average tuition, which includes the avrage tuition by state and year. Both of these data were found on the github rfordatascience website, and they are interesting becasue I think there might be a potential correlation between the voter turnout and college tuition in some area of the US.</description>
    </item>
    
    <item>
      <title>Project 2: Modeling, Testing, and Predicting</title>
      <link>/project2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/project2/</guid>
      <description>Modeling # data import and cleaning library(stats) library(tidyverse) library(dplyr) library(ggplot2) library(sandwich) library(lmtest) library(MASS) library(plotROC) library(glmnet) googleplaystore&amp;lt;-read_csv(&amp;quot;~/Desktop/website/content/googleplaystore.csv&amp;quot;) data &amp;lt;- googleplaystore%&amp;gt;%dplyr::select(App, Category, Rating, Reviews, Size, Installs, Type, Price)%&amp;gt;%filter(Size != &amp;quot;Varies with device&amp;quot;)%&amp;gt;%filter(str_detect(Size, pattern=&amp;quot;M&amp;quot;))%&amp;gt;%separate(Size, into=&amp;quot;Size&amp;quot;, sep=&amp;quot;M&amp;quot;, convert = TRUE)%&amp;gt;%filter(Category %in% c(&amp;quot;MEDICAL&amp;quot;,&amp;quot;GAME&amp;quot;,&amp;quot;SPORTS&amp;quot;))%&amp;gt;%distinct(App, .keep_all = TRUE)%&amp;gt;%na.omit() data &amp;lt;- data%&amp;gt;%mutate(y=as.numeric(Type==&amp;quot;Paid&amp;quot;)) # convert category to binary head(data) ## # A tibble: 6 x 9 ## App Category Rating Reviews Size Installs Type Price y ## &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; ## 1 ROBLOX GAME 4.</description>
    </item>
    
  </channel>
</rss>